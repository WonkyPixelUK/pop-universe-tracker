import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Trash2, Search, Plus, Share2, Copy, Heart, Repeat } from "lucide-react";
import { useCustomLists } from "@/hooks/useCustomLists";
import { useFunkoPops } from "@/hooks/useFunkoPops";
import { useToast } from "@/hooks/use-toast";

interface ListManagementDialogProps {
  listId: string;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

const ListManagementDialog = ({ listId, open, onOpenChange }: ListManagementDialogProps) => {
  const [searchTerm, setSearchTerm] = useState("");
  const [editMode, setEditMode] = useState(false);
  const [editName, setEditName] = useState("");
  const [editDescription, setEditDescription] = useState("");
  const [editIsPublic, setEditIsPublic] = useState(false);
  const [editSlug, setEditSlug] = useState("");
  const [slugError, setSlugError] = useState("");

  const { toast } = useToast();
  const { lists, updateList, addItemToList, removeItemFromList, updateListItem } = useCustomLists();
  const { data: allFunkoPops = [] } = useFunkoPops();

  const currentList = lists.find(list => list.id === listId);
  
  if (!currentList) return null;

  const listItems = currentList.list_items || [];
  const availablePops = allFunkoPops.filter(pop => 
    !listItems.some(item => item.funko_pops?.id === pop.id) &&
    (searchTerm === "" || 
     pop.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
     pop.series.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  const validateSlug = (slug: string) => /^[a-z0-9-]+$/.test(slug);
  const checkSlugAvailability = async (slug: string) => {
    if (!validateSlug(slug)) {
      setSlugError('Only a-z, 0-9, and hyphens allowed');
      return false;
    }
    if (slug === currentList.slug) {
      setSlugError('');
      return true;
    }
    const { data } = await updateList.mutateAsync.supabase
      .from('custom_lists')
      .select('id')
      .eq('slug', slug)
      .maybeSingle();
    if (data) {
      setSlugError('Slug is already taken');
      return false;
    }
    setSlugError('');
    return true;
  };

  const handleEdit = () => {
    setEditName(currentList.name);
    setEditDescription(currentList.description || "");
    setEditIsPublic(currentList.is_public || false);
    setEditSlug(currentList.slug || "");
    setSlugError("");
    setEditMode(true);
  };

  const handleSaveEdit = async () => {
    if (editSlug && !(await checkSlugAvailability(editSlug))) return;
    
    const wasPublic = currentList.is_public;
    const willBePublic = editIsPublic;
    
    await updateList.mutateAsync({
      listId: currentList.id,
      name: editName,
      description: editDescription,
      isPublic: editIsPublic,
      slug: editSlug || null,
    });
    
    // Show fun notification for privacy changes
    if (wasPublic !== willBePublic) {
      if (willBePublic) {
        toast({
          title: "🚀 List is Now Public!",
          description: "Your collection is live! Time to bask in the glory of your Funko prowess! ✨",
        });
      } else {
        toast({
          title: "🤫 Back to Stealth Mode",
          description: "Your list is now private. Your collection secrets are safe! 🕵️‍♂️",
        });
      }
    } else {
      toast({
        title: "✅ Settings Updated",
        description: "Your list settings have been saved successfully!",
      });
    }
    
    setEditMode(false);
  };

  const handleShare = () => {
    const shareUrl = `${window.location.origin}/lists/${listId}`;
    navigator.clipboard.writeText(shareUrl);
    toast({
      title: "Link copied!",
      description: "The list share link has been copied to your clipboard",
    });
  };

  const calculateListValue = () => {
    return listItems.reduce((total, item) => {
      return total + (item.funko_pops?.estimated_value || 0);
    }, 0);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[80vh] bg-gray-900 border-gray-700 text-white">
        <DialogHeader>
          <DialogTitle className="flex items-center justify-between">
            <div>
              {editMode ? (
                <Input
                  value={editName}
                  onChange={(e) => setEditName(e.target.value)}
                  className="bg-gray-800 border-gray-700 text-white"
                />
              ) : (
                <span>{currentList.name}</span>
              )}
            </div>
            <div className="flex items-center space-x-2">
              {currentList.is_public && (
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleShare}
                  className="border-gray-600"
                >
                  <Share2 className="w-4 h-4 mr-2" />
                  Share
                </Button>
              )}
              <Button
                variant="outline"
                size="sm"
                onClick={editMode ? handleSaveEdit : handleEdit}
                className="border-gray-600"
              >
                {editMode ? "Save" : "Edit"}
              </Button>
            </div>
          </DialogTitle>
        </DialogHeader>

        <Tabs defaultValue="items" className="w-full">
          <TabsList className="grid w-full grid-cols-3 bg-gray-800">
            <TabsTrigger value="items">Items ({listItems.length})</TabsTrigger>
            <TabsTrigger value="add">Add Items</TabsTrigger>
            <TabsTrigger value="settings">Settings</TabsTrigger>
          </TabsList>

          <TabsContent value="items" className="space-y-4 max-h-96 overflow-y-auto">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="bg-gray-800 p-4 rounded">
                <h3 className="font-semibold mb-2">List Statistics</h3>
                <p>Total Items: {listItems.length}</p>
                <p>Estimated Value: ${calculateListValue().toFixed(2)}</p>
              </div>
            </div>
            
            {listItems.length === 0 ? (
              <div className="text-center py-8 text-gray-400">
                <p>No items in this list yet</p>
                <p>Switch to the "Add Items" tab to get started</p>
              </div>
            ) : (
              <div className="space-y-2">
                {listItems.map((item) => (
                  <div key={item.id} className="flex items-center justify-between bg-gray-800 p-3 rounded">
                    <div className="flex items-center space-x-3">
                      {item.funko_pops?.image_url && (
                        <img 
                          src={item.funko_pops.image_url} 
                          alt={item.funko_pops.name}
                          className="w-12 h-12 object-cover rounded"
                        />
                      )}
                      <div>
                        <p className="font-medium flex items-center gap-2">
                          {item.funko_pops?.name}
                          {item.is_wishlist && (
                            <Badge className="bg-pink-600/20 text-pink-400 ml-1"><Heart className="w-3 h-3 inline mr-1" />Wishlist</Badge>
                          )}
                          {item.is_trade && (
                            <Badge className="bg-blue-600/20 text-blue-400 ml-1"><Repeat className="w-3 h-3 inline mr-1" />Trade</Badge>
                          )}
                        </p>
                        <p className="text-sm text-gray-400">{item.funko_pops?.series}</p>
                        {item.funko_pops?.estimated_value && (
                          <Badge variant="secondary">${item.funko_pops.estimated_value}</Badge>
                        )}
                      </div>
                    </div>
                    <div className="flex items-center gap-3">
                      <div className="flex flex-col items-center gap-1">
                        <span className="text-xs text-gray-400">Wishlist</span>
                        <Switch
                          checked={!!item.is_wishlist}
                          onCheckedChange={checked => updateListItem.mutate({ itemId: item.id, updates: { is_wishlist: checked } })}
                        />
                      </div>
                      <div className="flex flex-col items-center gap-1">
                        <span className="text-xs text-gray-400">Trade</span>
                        <Switch
                          checked={!!item.is_trade}
                          onCheckedChange={checked => updateListItem.mutate({ itemId: item.id, updates: { is_trade: checked } })}
                        />
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => removeItemFromList.mutateAsync({
                          listId: currentList.id,
                          funkoPopId: item.funko_pops?.id || ''
                        })}
                        className="text-red-400 hover:text-red-300"
                      >
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </TabsContent>

          <TabsContent value="add" className="space-y-4">
            <div className="relative">
              <Search className="absolute left-3 top-3 w-4 h-4 text-gray-400" />
              <Input
                placeholder="Search Funko Pops to add..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 bg-gray-800 border-gray-700"
              />
            </div>
            
            <div className="max-h-96 overflow-y-auto space-y-2">
              {availablePops.slice(0, 50).map((pop) => (
                <div key={pop.id} className="flex items-center justify-between bg-gray-800 p-3 rounded">
                  <div className="flex items-center space-x-3">
                    {pop.image_url && (
                      <img 
                        src={pop.image_url} 
                        alt={pop.name}
                        className="w-12 h-12 object-cover rounded"
                      />
                    )}
                    <div>
                      <p className="font-medium">{pop.name}</p>
                      <p className="text-sm text-gray-400">{pop.series}</p>
                      {pop.estimated_value && (
                        <Badge variant="secondary">${pop.estimated_value}</Badge>
                      )}
                    </div>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => addItemToList.mutateAsync({
                      listId: currentList.id,
                      funkoPopId: pop.id
                    })}
                    className="text-green-400 hover:text-green-300"
                  >
                    <Plus className="w-4 h-4" />
                  </Button>
                </div>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="settings" className="space-y-4">
            {editMode ? (
              <>
                <div>
                  <Label htmlFor="editName">List Name</Label>
                  <Input
                    id="editName"
                    value={editName}
                    onChange={(e) => setEditName(e.target.value)}
                    className="bg-gray-800 border-gray-700"
                  />
                </div>
                <div>
                  <Label htmlFor="editDescription">Description</Label>
                  <Textarea
                    id="editDescription"
                    value={editDescription}
                    onChange={(e) => setEditDescription(e.target.value)}
                    className="bg-gray-800 border-gray-700"
                  />
                </div>
                <div>
                  <Label htmlFor="editSlug">Custom URL (optional)</Label>
                  <Input
                    id="editSlug"
                    value={editSlug}
                    onChange={e => setEditSlug(e.target.value.replace(/[^a-z0-9-]/gi, '').toLowerCase())}
                    onBlur={e => editSlug && checkSlugAvailability(e.target.value)}
                    placeholder="e.g. richs-funkos-for-sale-v1"
                    className="bg-gray-800 border-gray-700"
                  />
                  {slugError && <span className="text-red-500 text-xs">{slugError}</span>}
                </div>
                <div className="flex items-center space-x-3">
                  <div className="relative">
                    <Switch
                      id="editIsPublic"
                      checked={editIsPublic}
                      onCheckedChange={(checked) => {
                        setEditIsPublic(checked);
                        if (checked) {
                          toast({
                            title: "🎉 List Going Live!",
                            description: "Your collection is about to go public! Get ready for some serious Funko envy! 😎",
                          });
                        } else {
                          toast({
                            title: "🔐 Into the Shadows",
                            description: "Your list is now private. Back to being a mysterious collector! 🥷",
                          });
                        }
                      }}
                      className={`${
                        editIsPublic 
                          ? 'data-[state=checked]:bg-green-500 data-[state=checked]:border-green-500' 
                          : 'data-[state=unchecked]:bg-red-500 data-[state=unchecked]:border-red-500'
                      } transition-colors duration-200`}
                    />
                    <div className={`absolute -top-1 -right-1 w-3 h-3 rounded-full transition-opacity duration-200 ${
                      editIsPublic ? 'bg-green-400 opacity-100 animate-pulse' : 'opacity-0'
                    }`} />
                  </div>
                  <Label htmlFor="editIsPublic" className="cursor-pointer">
                    <span className={`transition-colors duration-200 ${
                      editIsPublic ? 'text-green-400' : 'text-red-400'
                    }`}>
                      {editIsPublic ? '🌍 Public List' : '🔒 Private List'}
                    </span>
                  </Label>
                </div>
              </>
            ) : (
              <div className="space-y-4">
                <div>
                  <h3 className="font-semibold mb-2">Current Settings</h3>
                  <p><strong>Name:</strong> {currentList.name}</p>
                  <p><strong>Description:</strong> {currentList.description || 'No description'}</p>
                  <p><strong>Visibility:</strong> {currentList.is_public ? 'Public' : 'Private'}</p>
                  <p><strong>Created:</strong> {new Date(currentList.created_at).toLocaleDateString()}</p>
                </div>
                
                {currentList.is_public && (
                  <div className="bg-gray-800 p-4 rounded">
                    <h4 className="font-medium mb-2">Share this list</h4>
                    <div className="flex items-center space-x-2">
                      <Input
                        value={`${window.location.origin}/lists/${listId}`}
                        readOnly
                        className="bg-gray-700 border-gray-600"
                      />
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={handleShare}
                        className="border-gray-600"
                      >
                        <Copy className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                )}
              </div>
            )}
          </TabsContent>
        </Tabs>
      </DialogContent>
    </Dialog>
  );
};

export default ListManagementDialog;
